#!/usr/bin/env bash

set -o errexit   # Same as set -e; Exit immediately if a pipeline (â€¦) returns a
                 # non-zero status.
set -o pipefail  # Only return 0 if all parts of the pipeline return 0
set -o noclobber # Prevents you from accidentally overwritting a file with >
                 # when you meant to use >> Can be overridden with >!
set -o nounset   # Same as set -u; Exit if script tries to use undeclared var

# Constants
DIR="$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"

usage() {
  echo "
usage: ansible <command> [<args>]

ping                      Pings ansible nodes
                          [<args>]
                          1. pattern (optional - defaults to all)
                            - The host pattern to target
                          Example usage:
                          $ ansible ping home

playbook                  Run a specified playbook
                          [<args>]
                          1. playbook
                            - Name of playbook yaml in the ./playbooks
                              directory
                          Example usage:
                          $ ansible playbook mytask.yaml

cmd                       Run a live command on all your nodes
                          [<args>]
                          1. command
                            - Shell command to run
                          Example usage:
                          $ ansible cmd 'echo hello'

shell                     Run a shell command in the ansible container
                          [<args>]
                          1. command
                            - Shell command to run
                          Example usage:
                          $ ansible shell whoami
                          $ ansible shell ansible all -m ping

vault                     Run ansible-vault from the root of the
                          playbooks directory
                          [<args>]
                          1. command
                            - ansible-vault command to run
                          Example usage:
                          $ ansible vault decrypt group_vars/all/vault"
}

ping() {
  local nodes="${1:-all}"
  docker run --rm --interactive --tty \
    --volume "$HOME/.ssh:/root/.ssh" \
    --volume "$DIR/ansible-config:/etc/ansible" \
    -e "USER=$USER" \
    ansible ansible $nodes -m ping
}

playbook() {
  local playbook="$1"
  local tag="${2:-default}"

  docker run --rm --interactive --tty \
    --volume "$HOME/.ssh:/root/.ssh" \
    --volume "$DIR/ansible-config:/etc/ansible" \
    --volume "$DIR/playbooks:/root/playbooks" \
    --volume "$DIR/.vault-password:/root/.vault-password" \
    -e "USER=$USER" \
    ansible ansible-playbook \
      --vault-password-file /root/.vault-password \
      --tag=$tag \
      "/root/playbooks/${playbook}"
}

cmd() {
  local command="$@"
  docker run --rm --interactive --tty \
    --volume "$HOME/.ssh:/root/.ssh" \
    --volume "$DIR/ansible-config:/etc/ansible" \
    -e "USER=$USER" \
    ansible ansible all -a "${command}"
}

shell() {
  docker run --rm --interactive --tty \
    --volume "$HOME/.ssh:/root/.ssh" \
    --volume "$DIR/ansible-config:/etc/ansible" \
    --volume "$DIR/playbooks:/root/playbooks" \
    -e "USER=$USER" \
    ansible $@
}

# Runs ansible-vault with the playbooks directory as the root
# This allows for encrypting and decrypting files, ie:
# $ ./ansible vault decrypt group_vars/all/vault
# $ ./ansible vault encrypt group_vars/all/vault
vault() {
  docker run --rm --interactive --tty \
    --volume "$DIR/ansible-config:/etc/ansible" \
    --volume "$DIR/playbooks:/root/playbooks" \
    --volume "$DIR/.vault-password:/root/.vault-password" \
    --workdir /root/playbooks \
    -e "USER=$USER" \
    -u $(id -u):$(id -g) \
    ansible ansible-vault \
      $@ \
      --vault-password-file /root/.vault-password
}

main() {
  local command="${1:---help}"
  case $command in
    "" | "-h" | "--help")
      usage
      ;;
    "ping")
      shift 1
      ping $@
      ;;
    "playbook")
      shift 1
      playbook $@
      ;;
    "cmd")
      shift 1
      cmd $@
      ;;
    "shell")
      shift 1
      shell $@
      ;;
    "vault")
      shift 1
      vault $@
      ;;
    *)
      usage
      ;;
  esac
}

main $@
